@model ItemDataResponseModel
@{
    ViewData["Title"] = "Home Page";
}

@* <div class="cartTab">
    <h1>Shopping Cart</h1>
    <div class="listCart">
        <!-- Cart items will be dynamically added here -->
    </div>
    <div class="btn">
        <button class="close">CLOSE</button>
        <button class="checkOut">Check Out</button>
    </div>
</div>
<div class="container">
    @foreach (var item in Model.Data)
    {
        <div class="listProduct">
            <div data-id="@item.ItemId" class="item">
                <img src="~/assets/image/@(item.ItemId).png" />
                <h2>@item.Name</h2>
                <div>
                    Price:
                    <span class="price"> $@item.Price</span>
                </div>
                <div class="cartControls">
                    <div>Item Count :<span class="itemCount" id="count_@item.ItemId">1</span> </div>
                    <button class="reduceCount" onclick="reduceCount('@item.ItemId')">-</button>
                    <button class="increaseCount" onclick="increaseCount('@item.ItemId', '@item.Name', @item.Price)">+</button>
                    <button class="addToCart" onclick="addToCart('@item.ItemId', '@item.Name', @item.Price)">Add To Cart</button>
                </div>
            </div>
        </div>
    }
</div> *@
<div class="container">
    <header>
        <div class="title">PRODUCT LIST</div>
        <div class="icon-cart">
            <svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 20">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 15a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm0 0h8m-8 0-1-4m9 4a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm-9-4h10l2-7H3m2 7L3 4m0 0-.792-3H1" />
            </svg>
            <span>0</span>
        </div>
    </header>
    <div class="listProduct">
        @foreach (var item in Model.Data)
        {
            @*  <div data-id="@item.ItemId" class="item">
        <img src="~/assets/image/@(item.ItemId).png" />
        <h2>@item.Name</h2>
        <div>
        Price:
        <span class="price"> $@item.Price</span>
        </div>
        <div class="cartControls">
        <div>Item Count :<span class="itemCount" id="count_@item.ItemId">1</span> </div>
        <button class="reduceCount" onclick="reduceCount('@item.ItemId')">-</button>
        <button class="increaseCount" onclick="increaseCount('@item.ItemId', '@item.Name', @item.Price)">+</button>
        <button class="addCart" onclick="addToCart('@item.ItemId', '@item.Name', @item.Price)">Add To Cart</button>
        </div>
        </div> *@

            <div data-id="@item.ItemId" class="item">
                <img src="~/assets/image/@(item.ItemId).png" />
                <h2 id="product_name" value="@item.Name">@item.Name</h2>
                <div class="price" id="product_price" value="@item.Price">$@item.Price</div>
                <button class="addCart">Add To Cart</button>
            </div>
        }
    </div>
</div>
<div class="cartTab">
    <h1>Shopping Cart</h1>
    <div class="listCart">
    </div>
    <div class="btn">
        <button class="close">CLOSE</button>
        <button class="checkOut">Check Out</button>
    </div>
</div>
@section scripts {
    <script>
        let listProductHTML = document.querySelector('.listProduct');
        let listCartHTML = document.querySelector('.listCart');
        let iconCart = document.querySelector('.icon-cart');
        let iconCartSpan = document.querySelector('.icon-cart span');
        let body = document.querySelector('body');
        let closeCart = document.querySelector('.close');
        let products = [];
        let cart = [];


        iconCart.addEventListener('click', () => {
            body.classList.toggle('showCart');
        })
        closeCart.addEventListener('click', () => {
            body.classList.toggle('showCart');
        })

        listProductHTML.addEventListener('click', (event) => {
            let positionClick = event.target;
            if (positionClick.classList.contains('addCart')) {
                let id_product = positionClick.parentElement.dataset.id;
                console.log(id_product);
                addToCart(id_product);
            }
        })
        const addToCart = (product_id) => {
            let CartItem = {
                id: product_id,
                name: $('#product_name').text(),
                price: $('#product_price').text()
            };
            console.log({ CartItem });
            // addCartToHTML();
            // addCartToMemory();
        }
        const addCartToMemory = () => {
            localStorage.setItem('cart', JSON.stringify(cart));
        }
        const addCartToHTML = () => {
            listCartHTML.innerHTML = '';
            let totalQuantity = 0;
            if (cart.length > 0) {
                cart.forEach(item => {
                    totalQuantity = totalQuantity + item.quantity;
                    let newItem = document.createElement('div');
                    newItem.classList.add('item');
                    newItem.dataset.id = item.product_id;

                    let positionProduct = products.findIndex((value) => value.id == item.product_id);
                    let info = products[positionProduct];
                    listCartHTML.appendChild(newItem);
                    newItem.innerHTML = `
                    <div class="image">
                         
                    </div>
                    <div class="name">
                    ${info.name}
                    </div>
                    <div class="totalPrice">$${info.price * item.quantity}</div>
                    <div class="quantity">
                        <span class="minus"><</span>
                        <span>${item.quantity}</span>
                        <span class="plus">></span>
                    </div>
                                    `;
                })
            }
            iconCartSpan.innerText = totalQuantity;
        }

        listCartHTML.addEventListener('click', (event) => {
            let positionClick = event.target;
            if (positionClick.classList.contains('minus') || positionClick.classList.contains('plus')) {
                let product_id = positionClick.parentElement.parentElement.dataset.id;
                let type = 'minus';
                if (positionClick.classList.contains('plus')) {
                    type = 'plus';
                }
                changeQuantityCart(product_id, type);
            }
        })
        const changeQuantityCart = (product_id, type) => {
            let positionItemInCart = cart.findIndex((value) => value.product_id == product_id);
            if (positionItemInCart >= 0) {
                let info = cart[positionItemInCart];
                switch (type) {
                    case 'plus':
                        cart[positionItemInCart].quantity = cart[positionItemInCart].quantity + 1;
                        break;

                    default:
                        let changeQuantity = cart[positionItemInCart].quantity - 1;
                        if (changeQuantity > 0) {
                            cart[positionItemInCart].quantity = changeQuantity;
                        } else {
                            cart.splice(positionItemInCart, 1);
                        }
                        break;
                }
            }
            addCartToHTML();
            addCartToMemory();
        }
    </script>
}
